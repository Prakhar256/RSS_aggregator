package main

import (
	"database/sql"
	"fmt"
	"log"
	"net/http"
	"os"

	"github.com/Prakhar256/RSS_aggregator/internal/database"
	"github.com/go-chi/chi"
	"github.com/go-chi/cors"
	"github.com/joho/godotenv"
	_ "github.com/lib/pq"
)

type apiConfig struct {
	DB *database.Queries // Generated by SQLC, not the standard library
}

func main() {
	godotenv.Load()
	//this will fetch all environment variables form my .env file and put it into my current environment

	PortString := os.Getenv("PORT")
	if PortString == "" {
		log.Fatal(PortString + "is not available in environment")
	}

	db_URL := os.Getenv("DB_URL")
	if db_URL == "" {
		log.Fatal(db_URL + "is not available in environment")
	}

	conn, err := sql.Open("postgres", db_URL)
	if err != nil {
		log.Println("Can't connect to db")
	}

	apiCfg := apiConfig{
		DB: database.New(conn),
	}

	router := chi.NewRouter()
	router.Use(cors.Handler(cors.Options{
		AllowedOrigins:   []string{"http://*", "https://*"},
		AllowedMethods:   []string{"GET", "POST", "PUT", "OPTIONS", "DELETE"},
		AllowedHeaders:   []string{"*"},
		ExposedHeaders:   []string{"Link"},
		AllowCredentials: false,
		MaxAge:           300,
	}))

	v1Router := chi.NewRouter()
	v1Router.Get("/ready", handleReadiness)
	v1Router.Get("/err", handleErrors)
	v1Router.Post("/users", apiCfg.handlerCreateUser)
	v1Router.Get("/users", apiCfg.middlewareAuth(apiCfg.handleGetUser))
	// if user is authenticated the call this (handleGetUser) call back function is called to get user info

	v1Router.Post("/feeds", apiCfg.middlewareAuth(apiCfg.handlerCreateFeeds))
	v1Router.Get("/feeds", apiCfg.handlerGetFeeds)
	router.Mount("/v1", v1Router)

	port := ":" + PortString
	fmt.Println("Starting server on port", port)
	if err := http.ListenAndServe(port, router); err != nil {
		log.Fatal(err)
	}
}
